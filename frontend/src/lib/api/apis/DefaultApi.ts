/* tslint:disable */
/* eslint-disable */
/**
 * CSEC 490 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Class,
  Flag,
  Lesson,
} from '../models/index';
import {
    ClassFromJSON,
    ClassToJSON,
    FlagFromJSON,
    FlagToJSON,
    LessonFromJSON,
    LessonToJSON,
} from '../models/index';

export interface ApiV1ClassClassIdDeleteRequest {
    classId: string;
}

export interface ApiV1ClassClassIdLessonGetRequest {
    classId: string;
    id?: string;
}

export interface ApiV1ClassClassIdLessonLessonIdDeleteRequest {
    classId: string;
    lessonId: string;
}

export interface ApiV1ClassClassIdLessonLessonIdFlagFlagIdDeleteRequest {
    classId: string;
    lessonId: string;
    flagId: string;
}

export interface ApiV1ClassClassIdLessonLessonIdFlagFlagIdPutRequest {
    classId: string;
    lessonId: string;
    flagId: string;
    flag: Flag;
}

export interface ApiV1ClassClassIdLessonLessonIdFlagGetRequest {
    classId: string;
    lessonId: string;
    id?: string;
}

export interface ApiV1ClassClassIdLessonLessonIdFlagPostRequest {
    classId: string;
    lessonId: string;
    flag: Flag;
}

export interface ApiV1ClassClassIdLessonLessonIdPutRequest {
    classId: string;
    lessonId: string;
    lesson: Lesson;
}

export interface ApiV1ClassClassIdLessonPostRequest {
    classId: string;
    _class: Class;
}

export interface ApiV1ClassClassIdPutRequest {
    classId: string;
    _class: Class;
}

export interface ApiV1ClassGetRequest {
    id?: string;
}

export interface ApiV1ClassPostRequest {
    _class: Class;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Delete a class by ID
     */
    async apiV1ClassClassIdDeleteRaw(requestParameters: ApiV1ClassClassIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['classId'] == null) {
            throw new runtime.RequiredError(
                'classId',
                'Required parameter "classId" was null or undefined when calling apiV1ClassClassIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/class/{classId}`.replace(`{${"classId"}}`, encodeURIComponent(String(requestParameters['classId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a class by ID
     */
    async apiV1ClassClassIdDelete(requestParameters: ApiV1ClassClassIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1ClassClassIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get all lessons, or a specific lesson by ID
     */
    async apiV1ClassClassIdLessonGetRaw(requestParameters: ApiV1ClassClassIdLessonGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Lesson>>> {
        if (requestParameters['classId'] == null) {
            throw new runtime.RequiredError(
                'classId',
                'Required parameter "classId" was null or undefined when calling apiV1ClassClassIdLessonGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/class/{classId}/lesson`.replace(`{${"classId"}}`, encodeURIComponent(String(requestParameters['classId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LessonFromJSON));
    }

    /**
     * Get all lessons, or a specific lesson by ID
     */
    async apiV1ClassClassIdLessonGet(requestParameters: ApiV1ClassClassIdLessonGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Lesson>> {
        const response = await this.apiV1ClassClassIdLessonGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a lesson by ID
     */
    async apiV1ClassClassIdLessonLessonIdDeleteRaw(requestParameters: ApiV1ClassClassIdLessonLessonIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['classId'] == null) {
            throw new runtime.RequiredError(
                'classId',
                'Required parameter "classId" was null or undefined when calling apiV1ClassClassIdLessonLessonIdDelete().'
            );
        }

        if (requestParameters['lessonId'] == null) {
            throw new runtime.RequiredError(
                'lessonId',
                'Required parameter "lessonId" was null or undefined when calling apiV1ClassClassIdLessonLessonIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/class/{classId}/lesson/{lessonId}`.replace(`{${"classId"}}`, encodeURIComponent(String(requestParameters['classId']))).replace(`{${"lessonId"}}`, encodeURIComponent(String(requestParameters['lessonId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a lesson by ID
     */
    async apiV1ClassClassIdLessonLessonIdDelete(requestParameters: ApiV1ClassClassIdLessonLessonIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1ClassClassIdLessonLessonIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a flag by ID
     */
    async apiV1ClassClassIdLessonLessonIdFlagFlagIdDeleteRaw(requestParameters: ApiV1ClassClassIdLessonLessonIdFlagFlagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['classId'] == null) {
            throw new runtime.RequiredError(
                'classId',
                'Required parameter "classId" was null or undefined when calling apiV1ClassClassIdLessonLessonIdFlagFlagIdDelete().'
            );
        }

        if (requestParameters['lessonId'] == null) {
            throw new runtime.RequiredError(
                'lessonId',
                'Required parameter "lessonId" was null or undefined when calling apiV1ClassClassIdLessonLessonIdFlagFlagIdDelete().'
            );
        }

        if (requestParameters['flagId'] == null) {
            throw new runtime.RequiredError(
                'flagId',
                'Required parameter "flagId" was null or undefined when calling apiV1ClassClassIdLessonLessonIdFlagFlagIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/class/{classId}/lesson/{lessonId}/flag/{flagId}`.replace(`{${"classId"}}`, encodeURIComponent(String(requestParameters['classId']))).replace(`{${"lessonId"}}`, encodeURIComponent(String(requestParameters['lessonId']))).replace(`{${"flagId"}}`, encodeURIComponent(String(requestParameters['flagId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a flag by ID
     */
    async apiV1ClassClassIdLessonLessonIdFlagFlagIdDelete(requestParameters: ApiV1ClassClassIdLessonLessonIdFlagFlagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1ClassClassIdLessonLessonIdFlagFlagIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Update a lesson by ID
     */
    async apiV1ClassClassIdLessonLessonIdFlagFlagIdPutRaw(requestParameters: ApiV1ClassClassIdLessonLessonIdFlagFlagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Flag>> {
        if (requestParameters['classId'] == null) {
            throw new runtime.RequiredError(
                'classId',
                'Required parameter "classId" was null or undefined when calling apiV1ClassClassIdLessonLessonIdFlagFlagIdPut().'
            );
        }

        if (requestParameters['lessonId'] == null) {
            throw new runtime.RequiredError(
                'lessonId',
                'Required parameter "lessonId" was null or undefined when calling apiV1ClassClassIdLessonLessonIdFlagFlagIdPut().'
            );
        }

        if (requestParameters['flagId'] == null) {
            throw new runtime.RequiredError(
                'flagId',
                'Required parameter "flagId" was null or undefined when calling apiV1ClassClassIdLessonLessonIdFlagFlagIdPut().'
            );
        }

        if (requestParameters['flag'] == null) {
            throw new runtime.RequiredError(
                'flag',
                'Required parameter "flag" was null or undefined when calling apiV1ClassClassIdLessonLessonIdFlagFlagIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/class/{classId}/lesson/{lessonId}/flag/{flagId}`.replace(`{${"classId"}}`, encodeURIComponent(String(requestParameters['classId']))).replace(`{${"lessonId"}}`, encodeURIComponent(String(requestParameters['lessonId']))).replace(`{${"flagId"}}`, encodeURIComponent(String(requestParameters['flagId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FlagToJSON(requestParameters['flag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlagFromJSON(jsonValue));
    }

    /**
     * Update a lesson by ID
     */
    async apiV1ClassClassIdLessonLessonIdFlagFlagIdPut(requestParameters: ApiV1ClassClassIdLessonLessonIdFlagFlagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Flag> {
        const response = await this.apiV1ClassClassIdLessonLessonIdFlagFlagIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all flags, or a specific flag by ID
     */
    async apiV1ClassClassIdLessonLessonIdFlagGetRaw(requestParameters: ApiV1ClassClassIdLessonLessonIdFlagGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Flag>>> {
        if (requestParameters['classId'] == null) {
            throw new runtime.RequiredError(
                'classId',
                'Required parameter "classId" was null or undefined when calling apiV1ClassClassIdLessonLessonIdFlagGet().'
            );
        }

        if (requestParameters['lessonId'] == null) {
            throw new runtime.RequiredError(
                'lessonId',
                'Required parameter "lessonId" was null or undefined when calling apiV1ClassClassIdLessonLessonIdFlagGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/class/{classId}/lesson/{lessonId}/flag`.replace(`{${"classId"}}`, encodeURIComponent(String(requestParameters['classId']))).replace(`{${"lessonId"}}`, encodeURIComponent(String(requestParameters['lessonId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FlagFromJSON));
    }

    /**
     * Get all flags, or a specific flag by ID
     */
    async apiV1ClassClassIdLessonLessonIdFlagGet(requestParameters: ApiV1ClassClassIdLessonLessonIdFlagGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Flag>> {
        const response = await this.apiV1ClassClassIdLessonLessonIdFlagGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new flag
     */
    async apiV1ClassClassIdLessonLessonIdFlagPostRaw(requestParameters: ApiV1ClassClassIdLessonLessonIdFlagPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Flag>> {
        if (requestParameters['classId'] == null) {
            throw new runtime.RequiredError(
                'classId',
                'Required parameter "classId" was null or undefined when calling apiV1ClassClassIdLessonLessonIdFlagPost().'
            );
        }

        if (requestParameters['lessonId'] == null) {
            throw new runtime.RequiredError(
                'lessonId',
                'Required parameter "lessonId" was null or undefined when calling apiV1ClassClassIdLessonLessonIdFlagPost().'
            );
        }

        if (requestParameters['flag'] == null) {
            throw new runtime.RequiredError(
                'flag',
                'Required parameter "flag" was null or undefined when calling apiV1ClassClassIdLessonLessonIdFlagPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/class/{classId}/lesson/{lessonId}/flag`.replace(`{${"classId"}}`, encodeURIComponent(String(requestParameters['classId']))).replace(`{${"lessonId"}}`, encodeURIComponent(String(requestParameters['lessonId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FlagToJSON(requestParameters['flag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlagFromJSON(jsonValue));
    }

    /**
     * Create a new flag
     */
    async apiV1ClassClassIdLessonLessonIdFlagPost(requestParameters: ApiV1ClassClassIdLessonLessonIdFlagPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Flag> {
        const response = await this.apiV1ClassClassIdLessonLessonIdFlagPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a lesson by ID
     */
    async apiV1ClassClassIdLessonLessonIdPutRaw(requestParameters: ApiV1ClassClassIdLessonLessonIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lesson>> {
        if (requestParameters['classId'] == null) {
            throw new runtime.RequiredError(
                'classId',
                'Required parameter "classId" was null or undefined when calling apiV1ClassClassIdLessonLessonIdPut().'
            );
        }

        if (requestParameters['lessonId'] == null) {
            throw new runtime.RequiredError(
                'lessonId',
                'Required parameter "lessonId" was null or undefined when calling apiV1ClassClassIdLessonLessonIdPut().'
            );
        }

        if (requestParameters['lesson'] == null) {
            throw new runtime.RequiredError(
                'lesson',
                'Required parameter "lesson" was null or undefined when calling apiV1ClassClassIdLessonLessonIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/class/{classId}/lesson/{lessonId}`.replace(`{${"classId"}}`, encodeURIComponent(String(requestParameters['classId']))).replace(`{${"lessonId"}}`, encodeURIComponent(String(requestParameters['lessonId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LessonToJSON(requestParameters['lesson']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LessonFromJSON(jsonValue));
    }

    /**
     * Update a lesson by ID
     */
    async apiV1ClassClassIdLessonLessonIdPut(requestParameters: ApiV1ClassClassIdLessonLessonIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lesson> {
        const response = await this.apiV1ClassClassIdLessonLessonIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new lesson
     */
    async apiV1ClassClassIdLessonPostRaw(requestParameters: ApiV1ClassClassIdLessonPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lesson>> {
        if (requestParameters['classId'] == null) {
            throw new runtime.RequiredError(
                'classId',
                'Required parameter "classId" was null or undefined when calling apiV1ClassClassIdLessonPost().'
            );
        }

        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling apiV1ClassClassIdLessonPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/class/{classId}/lesson`.replace(`{${"classId"}}`, encodeURIComponent(String(requestParameters['classId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClassToJSON(requestParameters['_class']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LessonFromJSON(jsonValue));
    }

    /**
     * Create a new lesson
     */
    async apiV1ClassClassIdLessonPost(requestParameters: ApiV1ClassClassIdLessonPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lesson> {
        const response = await this.apiV1ClassClassIdLessonPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a class by ID
     */
    async apiV1ClassClassIdPutRaw(requestParameters: ApiV1ClassClassIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Class>> {
        if (requestParameters['classId'] == null) {
            throw new runtime.RequiredError(
                'classId',
                'Required parameter "classId" was null or undefined when calling apiV1ClassClassIdPut().'
            );
        }

        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling apiV1ClassClassIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/class/{classId}`.replace(`{${"classId"}}`, encodeURIComponent(String(requestParameters['classId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClassToJSON(requestParameters['_class']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClassFromJSON(jsonValue));
    }

    /**
     * Update a class by ID
     */
    async apiV1ClassClassIdPut(requestParameters: ApiV1ClassClassIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Class> {
        const response = await this.apiV1ClassClassIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all classes, or a specific class by ID
     */
    async apiV1ClassGetRaw(requestParameters: ApiV1ClassGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Class>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/class`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClassFromJSON));
    }

    /**
     * Get all classes, or a specific class by ID
     */
    async apiV1ClassGet(requestParameters: ApiV1ClassGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Class>> {
        const response = await this.apiV1ClassGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new class
     */
    async apiV1ClassPostRaw(requestParameters: ApiV1ClassPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Class>> {
        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling apiV1ClassPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/class`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClassToJSON(requestParameters['_class']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClassFromJSON(jsonValue));
    }

    /**
     * Create a new class
     */
    async apiV1ClassPost(requestParameters: ApiV1ClassPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Class> {
        const response = await this.apiV1ClassPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
